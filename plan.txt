Camera Projection matrices: pmvs/txt
Images: pmvs/visualize
GPS positions in LSR space: pmvs/pos

Read in PLY
  Read header infomation
    get vert info
      read lines until you get to "element"
      read number of vertices
    get face info
      read lines until you get to "element"
      read number of faces
    read until you get to end_header
  Read points (element vertex)
    for number of vertices
      get line, read first 3 numbers for x,y,z
  Read triangle information (element face)
    for number of faces
      get line, read 2nd,3rd,4th number for triangle information

Read in Patches file
  Store total number of points
  Point information
    For each point need to store:
      3D point
      3D normal
      Number of images
      Indices of best 5 images
  Read file
    Open file with known filename
    if file is open
      Read first line, make sure it says PATCHES
      Read next line to get number of points
      for the number of points
        read 9 lines for that 1 point and
        extract information from those 9 lines
        if the xyz is in the ply file save the patch information
Read in Camera projection files
  Array of cameras
  Store 3x4 matrix as eigen::matrix
  RQ Decomposition to find camera pointing direction
Read in center files (may not be needed if RQ works)
  PLY file - x,y,z locations for each camera
Read images
  only the 22 images
Read option file (for 22 target image indices)


For each triangle chose best image for triangle
  Make cost function for images from camera information from best images list in patch info
  
Display with OpenGL
  
